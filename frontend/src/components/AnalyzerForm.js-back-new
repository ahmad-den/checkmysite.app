import React, { useState } from 'react';
import { toast } from 'react-toastify';  // Import toast functions

const AnalyzerForm = ({ onAnalyze, onLighthouseReport }) => {
  const [url, setUrl] = useState('');
  const [option, setOption] = useState('default');
  const [coreWebVitals, setCoreWebVitals] = useState(false);
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);  // Loading state for disabling button

  const validateURL = (input) => {
    const regex = /^(https?:\/\/[^\s$.?#].[^\s]*)$/gm;
    return regex.test(input);
  };

  const modifyUrlForOption = (url, option) => {
    if (option === 'noperfmatters') {
      return `${url}?perfmattersoff`;
    } else if (option === 'nocache') {
      return `${url}?nocache`;
    }
    return url;
  };

  // Function to poll for job completion (for Node.js)
  const pollForJobCompletion = async (jobId, reportUrl, generatingToastId) => {
    try {
      let isJobComplete = false;
      let retries = 30;

      while (!isJobComplete && retries > 0) {
        const response = await fetch(`https://checkmysite.app/lighthouse/status/${jobId}`);
        const result = await response.json();

        if (response.ok && result.status === 'completed') {
          isJobComplete = true;
          toast.dismiss(generatingToastId);  // Dismiss the "Generating" toast
          
          onLighthouseReport(reportUrl);
        } else if (result.status === 'failed') {
          throw new Error('Lighthouse report generation failed');
        } else {
          retries -= 1;
          await new Promise((resolve) => setTimeout(resolve, 5000));  // Poll every 2 seconds
        }
      }

      if (!isJobComplete) {
        throw new Error('Lighthouse report generation timed out');
      }
    } catch (err) {
      console.error('Error polling for job completion:', err);
      toast.dismiss(generatingToastId);
      toast.error('Error generating Lighthouse report.');
    }
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateURL(url)) {
      setError('Please enter a valid URL.');
      return;
    }

    setError('');  // Clear any previous error
    setIsSubmitting(true);  // Disable the button

    // Modify the URL based on the selected option
    const modifiedUrl = modifyUrlForOption(url, option);

    // If CWV (Core Web Vitals) is enabled
    if (coreWebVitals) {
      const generatingToastId = toast.info('Generating Core Web Vitals report...', {
        autoClose: false,  // Keep toast open until manually closed
        closeOnClick: false,  // Disable close on click
      });

      try {
        // Send request to Node.js backend for CWV
        const nodeResponse = await fetch('https://checkmysite.app/lighthouse/analyze', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ url: modifiedUrl }),
        });

        if (!nodeResponse.ok) {
          throw new Error('Failed to fetch Node.js backend');
        }

        const nodeResult = await nodeResponse.json();

        // Ensure that the jobId is present and valid
        if (nodeResult.jobId) {
          // Start polling for job completion
          await pollForJobCompletion(nodeResult.jobId, nodeResult.reportUrl, generatingToastId);
        } else {
          throw new Error('Job ID is missing');
        }
      } catch (err) {
        console.error('Error calling Lighthouse API:', err);
        toast.dismiss(generatingToastId);
        setError('An error occurred while generating the Lighthouse report.');
        toast.error('An error occurred while generating the report.');
      }
    }

    // Always send request to Python backend (regardless of CWV checkbox)
    try {
      await onAnalyze({ url: modifiedUrl, option, runCoreWebVitals: coreWebVitals });
    } catch (error) {
      console.error('Error analyzing the site:', error);
    } finally {
      setIsSubmitting(false);  // Re-enable the button
    }
  };

  return (
    <form className="bg-white p-8 rounded-lg shadow-lg space-y-6" onSubmit={handleSubmit}>
      <h2 className="text-2xl font-semibold text-[#007BFF] mb-4">Analyze Your Website</h2>

      <div className="mb-6">
        <label className="block text-lg font-medium mb-2">Enter URL:</label>
        <input
          type="text"
          className="w-full border rounded-lg p-3 mt-1 focus:ring focus:ring-[#32CC86] outline-none transition duration-300"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          placeholder="https://example.com"
        />
        {error && <p className="text-red-500 mt-2">{error}</p>}
      </div>

      <div className="mb-6">
        <label className="block text-lg font-medium mb-2">Performance Options:</label>
        <div className="flex space-x-6">
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              name="option"
              value="noperfmatters"
              checked={option === 'noperfmatters'}
              onChange={() => setOption('noperfmatters')}
              className="focus:ring-[#32CC86] text-[#007BFF]"
            />
            <span>No PerfMatters</span>
          </label>
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              name="option"
              value="nocache"
              checked={option === 'nocache'}
              onChange={() => setOption('nocache')}
              className="focus:ring-[#32CC86] text-[#007BFF]"
            />
            <span>No Cache</span>
          </label>
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              name="option"
              value="default"
              checked={option === 'default'}
              onChange={() => setOption('default')}
              className="focus:ring-[#32CC86] text-[#007BFF]"
            />
            <span>Default</span>
          </label>
        </div>
      </div>

      <div className="flex items-center mb-6">
        <input
          type="checkbox"
          checked={coreWebVitals}
          onChange={() => setCoreWebVitals(!coreWebVitals)}
          className="mr-3 focus:ring-[#32CC86]"
        />
        <label>Run Core Web Vitals (via Lighthouse)</label>
      </div>

      <button
        type="submit"
        className={`bg-[#007BFF] text-white px-6 py-3 rounded-lg hover:bg-[#0056b3] transition duration-300 ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
        disabled={isSubmitting}  // Disable the button during submission
      >
        {isSubmitting ? 'Generating Report...' : 'Analyze'}
      </button>
    </form>
  );
};

export default AnalyzerForm;
